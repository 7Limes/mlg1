include "bytes"

define SQUARE_WAVE 0
define TRIANGLE_WAVE 1
define SAWTOOTH_WAVE 2
define NOISE_WAVE 3


define _AUDIO_CHANNELS 8

define _EVENT_SIZE 3  // Slots


fn load_song(song_data) {
    global __song_data = song_data
    global __song_byte_index = 0
    global __song_channel_count = packit_next_u8(song_data, &__song_byte_index)
    global __channel_waveforms[_AUDIO_CHANNELS]
    for (let i = 0; i < __song_channel_count; i=i+1) {
        let waveform = packit_next_u8(song_data, &__song_byte_index)
        set(__channel_waveforms+i, waveform)
    }

    global __song_timer = 0
    global __song_entry_count = packit_next_s32(song_data, &__song_byte_index)
    global __song_entry_index = 0
    global __song_next_entry_time = -1
    global __song_next_entry_events = 0
    global __song_next_events[_AUDIO_CHANNELS * _EVENT_SIZE]
    _load_next_entry()
}

fn _load_next_entry() {
    __song_next_entry_time = packit_next_u24(__song_data, &__song_byte_index)
    __song_next_entry_events = packit_next_u8(__song_data, &__song_byte_index)
    for (let i = 0; i < __song_next_entry_events; i=i+1) {
        let channel = packit_next_u8(__song_data, &__song_byte_index)
        let frequency = packit_next_u16(__song_data, &__song_byte_index)
        let volume = packit_next_u16(__song_data, &__song_byte_index)
        let array_pointer = __song_next_events + i * _EVENT_SIZE
        set(array_pointer, channel)
        set(array_pointer+1, frequency)
        set(array_pointer+2, volume)
    }

    __song_entry_index = __song_entry_index + 1
    if (__song_entry_index >= __song_entry_count) {
        // Song has ended
        for (let j = 0; j < __song_channel_count; j=j+1) {
            setchannel(j, 0, 0, 0)
        }
        __song_channel_count = 0
    }
}


fn _execute_events() {
    for (let i = 0; i < __song_next_entry_events; i=i+1) {
        let array_pointer = __song_next_events + i * _EVENT_SIZE
        let channel = get(array_pointer)
        let frequency = get(array_pointer+1)
        let volume = get(array_pointer+2)
        let waveform = get(__channel_waveforms+channel)
        setchannel(channel, waveform, frequency, volume)
    }
}


fn play_song_tick() {
    if (__song_channel_count == 0) {
        return 1
    }

    while (__song_timer >= __song_next_entry_time) {
        _execute_events()
        _load_next_entry()
    }

    __song_timer = __song_timer + DELTA

    return 0
}