// Written by Claude, not sure if this actually works

fn flood_fill(start_x, start_y, old_color, new_color) {
    // If starting pixel isn't the old color or is already the new color, return early
    let current_pixel = getpixel(start_x, start_y)
    if !(current_pixel == old_color) {
        return 0
    }
    if old_color == new_color {
        return 0
    }
    
    // Use RGB (1, 1, 1) as temp color
    let temp_color = 65793  // 1 + (1 * 256) + (1 * 256 * 256)
    
    // Initialize with starting point
    let current_x = start_x
    let current_y = start_y
    
    // Direction variables: 0=up, 1=right, 2=down, 3=left, 4=backtrack
    let direction = 0
    
    // Mark the starting pixel
    color(1, 1, 1)
    point(current_x, current_y)
    
    let can_go = 0
    let check_pixel = 0
    let pixel = 0

    let done = 0
    while !done {
        if direction == 0 {  // Try to go up
            can_go = 0
            if 0 < current_y {
                check_pixel = getpixel(current_x, current_y - 1)
                if check_pixel == old_color {
                    can_go = 1
                }
            }
            
            if can_go {
                current_y = current_y - 1
                color(1, 1, 1)
                point(current_x, current_y)
                direction = 0  // Keep trying to go up
            }
            else {
                direction = 1  // Try to go right
            }
        }
        else { if direction == 1 {  // Try to go right
            can_go = 0
            if current_x < WIDTH - 1 {
                check_pixel = getpixel(current_x + 1, current_y)
                if check_pixel == old_color {
                    can_go = 1
                }
            }
            
            if can_go {
                current_x = current_x + 1
                color(1, 1, 1)
                point(current_x, current_y)
                direction = 0  // After moving right, try to go up
            }
            else {
                direction = 2  // Try to go down
            }
        }
        else { if direction == 2 {  // Try to go down
            can_go = 0
            if current_y < HEIGHT - 1 {
                check_pixel = getpixel(current_x, current_y + 1)
                if check_pixel == old_color {
                    can_go = 1
                }
            }
            
            if can_go {
                current_y = current_y + 1
                color(1, 1, 1)
                point(current_x, current_y)
                direction = 0  // After moving down, try to go up
            }
            else {
                direction = 3  // Try to go left
            }
        }
        else { if direction == 3 {  // Try to go left
            can_go = 0
            if 0 < current_x {
                check_pixel = getpixel(current_x - 1, current_y)
                if check_pixel == old_color {
                    can_go = 1
                }
            }
            
            if can_go {
                current_x = current_x - 1
                color(1, 1, 1)
                point(current_x, current_y)
                direction = 0  // After moving left, try to go up
            }
            else {
                direction = 4  // Need to backtrack
            }
        }
        else { if direction == 4 {  // Backtracking
            // Look in all 4 directions for a temp_color pixel with an unfilled neighbor
            let backtrack_found = 0
            
            // Search the entire buffer for a place to resume
            let by = 0
            while by < HEIGHT * !backtrack_found {
                let bx = 0
                while bx < WIDTH * !backtrack_found {
                    pixel = getpixel(bx, by)
                    if pixel == temp_color {
                        // Check all 4 directions for unfilled pixels
                        let has_unfilled = 0
                        
                        // Check up
                        if 0 < by {
                            let up_pixel = getpixel(bx, by - 1)
                            if up_pixel == old_color {
                                has_unfilled = 1
                            }
                        }
                        
                        // Check right
                        if !has_unfilled * (bx < WIDTH - 1) {
                            let right_pixel = getpixel(bx + 1, by)
                            if right_pixel == old_color {
                                has_unfilled = 1
                            }
                        }
                        
                        // Check down
                        if !has_unfilled * (by < HEIGHT - 1) {
                            let down_pixel = getpixel(bx, by + 1)
                            if down_pixel == old_color {
                                has_unfilled = 1
                            }
                        }
                        
                        // Check left
                        if !has_unfilled * (0 < bx) {
                            let left_pixel = getpixel(bx - 1, by)
                            if left_pixel == old_color {
                                has_unfilled = 1
                            }
                        }
                        
                        if has_unfilled {
                            current_x = bx
                            current_y = by
                            direction = 0  // Reset direction to try up first
                            backtrack_found = 1
                        }
                    }
                    
                    bx = bx + 1
                }
                by = by + 1
            }
            
            // If no backtrack point found, we're done
            if !backtrack_found {
                done = 1
            }
        }}}}}
    }
    
    // Replace all temp_color pixels with new_color
    let r = new_color % 256
    let g_b = new_color / 256
    let g = g_b % 256
    let b = g_b / 256
    
    let fy = 0
    while fy < HEIGHT {
        let fx = 0
        while fx < WIDTH {
            pixel = getpixel(fx, fy)
            if pixel == temp_color {
                color(r, g, b)
                point(fx, fy)
            }
            fx = fx + 1
        }
        fy = fy + 1
    }
}